@startuml

class Server {
    - port: int
    - router: Router
    --
    + Server()
    + start(): void
}

class Router {
    - services: HashMap<String, IService>
    --
    + newService(String, IService): void
    + deleteService(String): void
    + getService(String): IService

}

class RequestHandler {
    - socket: Socket
    - router: Router
    - out: PrintWriter
    - in: BufferedReader
    --
    + RequestHandler(Socket, Router)
    + run(): void
}


class Main {
    + <<static>> main(String[]) : void
    - <<static>> setupRouter() : Router
}

interface IService {
    + handleRequest()
}

class HeaderMap {
    + <<static final>> LENGTH_HEADER: String
    + <<static final>> HEADER_SEPARATOR: String
    - headers: HashMap<String, String>
    --
    + splitLine(String): void
    + getHeader(String): void
    + getContentLength(): int
    + print(): void
}

class Request {
    - method: RestMethod
    - url: String
    - path: String
    - pathParts: List<String>
    - params: String
    - headerMap: HeaderMap
    - body: String
    --
    <<methods only getter/setter>>
}

class Response {
    - statusCode: int
    - statusMessage: String
    - contentType: String
    - body: String
    --
    + Response(HttpStatus, ContentType, String)
    + getMessage(): String
}

enum HttpStatus {
    + <<final>> statusCode: int
    + <<final>> statusMessage: String
    --
    HttpStatus(int, String)
}

enum ContentType {
    + <<final>> mimeType: String
    --
    + ContentType(String)
}

enum RestMethod {
}

enum DbCredentials {
    - connectionUrl: String
    --
    getConnection(): Connection
}

class DbAccessException {
    + DbAccessException(String)
    + DbAccessException(String, Throwable)
    + DbAccessException(Throwable)

}

class TransactionUnit {
    - connection: Connection
    --
    + TransactionUnit()
    + dbCommit(): void
    + dbRollback(): void
    + dbFinish(): void
    + prepareStatement(String): PreparedStatement
    + close(): void
}

class Controller {
    - objectMapper: ObjectMapper
    --
    + Controller()
    + getObjectMapper()
}

class LoginService {
    - <<final>> controller: LoginController
    --
    + LoginService()
    + handleRequest(): Response

}

class LoginController {
    + login(String, String)
}

class RegistrationSerivce {
    - <<final>> controller: RegistrationController
    --
    + RegistrationService()
    + handleRequest(Request): Response
}

class RegistrationController {
    + register(String, String): Response
}

class RequestBuilder {
    + buildRequest(BufferedReader): Request
    - getMethod(String): RestMethod
    - setPath(Request, String): void
}


SessionRepository ---o RegistrationController
RestMethod --> RequestBuilder

RequestBuilder ----o RequestHandler
LoginController o---- SessionRepository
LoginService *---- LoginController
Controller <|---- RegistrationController
Controller <|---- LoginController

TransactionUnit --* LoginController
TransactionUnit --* RegistrationController

DbAccessException ---> TransactionUnit
RegistrationService *---- RegistrationController
Response ----o LoginService
IService ....> RegistrationSerivce
IService ....> LoginService
DbAccessException ----> DbCredentials
Server *---- Router
HttpStatus ....> Response
ContentType ....> Response
Server ----* Main
RequestHandler ----o Server
Router *---- RequestHandler
Response ----o RequestHandler
HeaderMap ----* Request
RequestHandler o--- Request



@enduml